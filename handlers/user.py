from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from database.plan import get_user_plans
from keyboards.inline import create_plan_keyboard, plans_keyboard
from states.plans import PlanCreation
from utils import logger
from database.database import db

router = Router()


@router.callback_query(F.data == "view_user_plans")
async def handle_show_user_plans(callback: CallbackQuery):
    try:
        db.refresh_session()

        user_plans = get_user_plans(callback.from_user.id)

        if not user_plans:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.",
                reply_markup=create_plan_keyboard(),
            )
            return

        await callback.message.edit_text(
            "üìÅ –í–∞—à–∏ –ø–ª–∞–Ω—ã:", reply_markup=plans_keyboard(user_plans, "user")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_plan_keyboard(),
        )
    finally:
        await callback.answer()


@router.callback_query(F.data == "create_plan")
async def create_plan_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞:", reply_markup=create_plan_keyboard()
    )
    await state.set_state(PlanCreation.waiting_for_title)
    await callback.answer()
