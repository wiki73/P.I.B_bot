from aiogram import Bot, Dispatcher, types,F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message,InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
from database import create_tables, get_user_name, save_user_name, save_user_plan, get_user_plan, get_base_plan, get_plan_name_by_id, update_user_current_plan, get_current_plan, get_db_connection, get_plan_text_by_name
from dotenv import load_dotenv
import os
from database import get_user_name, save_user_name,get_base_plan,get_plan_name_by_id,save_user_plan,get_user_plan,update_user_current_plan,get_current_plan,get_plan_text_by_name

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_tables()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    waiting_for_nickname = State()
    waiting_for_plan_title = State()
    waiting_for_plan_tasks = State()
    waiting_for_base_plan_choice = State()
    waiting_for_confirm = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
personal_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start"), KeyboardButton(text="/help")],
        [KeyboardButton(text="/info"), KeyboardButton(text="/create_plan")],
        [KeyboardButton(text="/view_plans")]
    ],
    resize_keyboard=True,
    persistent=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
group_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/new_day"), KeyboardButton(text="/static")],
        [KeyboardButton(text="/help")]
    ],
    resize_keyboard=True,
    persistent=True
)
####
@dp.message(F.chat.type == {"group", "supergroup"})
async def private_chat_handler(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if not message.text.startswith('/'):
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
            reply_markup=personal_keyboard
        )
# @dp.message()
# async def auto_keyboard(message: Message):
#     if message.chat.type == "private" and not message.text.startswith('/'):
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=personal_keyboard)
#     elif message.chat.type in {"group", "supergroup"} and not message.text.startswith('/'):
#         await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=group_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = get_user_name(user_id)
    
    if user_name is None:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?')
        await state.set_state(UserState.waiting_for_nickname)
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        await show_main_menu(message)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="my_plans")],
        [InlineKeyboardButton(text="–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã", callback_data="base_plans")],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="create_plan")],
        [InlineKeyboardButton(text="–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data="current_plan")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞
@dp.message(UserState.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_nick = message.text
    save_user_name(user_id, user_nick)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {user_nick}!", reply_markup=personal_keyboard)
    await state.clear()
    await show_main_menu(message)

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command('help'))
async def help_command(message: Message):
    
    
    if message.chat.type == "private":
        help_text = (
            "–õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/info - –û –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏\n"
            "/create_plan - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
            "/view_plans - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—ã"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data="current_plan")]
        ])

        await message.answer(help_text, reply_markup=personal_keyboard)
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ:", reply_markup=inline_keyboard)
    else:
        await message.answer(
            "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/new_day - –ù–∞—á–∞—Ç—å –¥–µ–Ω—å\n"
            "/static - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            reply_markup=group_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä—Å–∏–∫—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è start
@dp.callback_query(F.data == 'my_plans')
async def show_user_plans(callback: CallbackQuery, state: FSMContext):
    user_plans = get_user_plan(callback.from_user.id)
    
    if not user_plans:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=plan['name'], callback_data=f"select_plan:user:{plan['id']}")]
        for plan in user_plans
    ])
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–ª–∞–Ω:", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è start
@dp.callback_query(F.data == 'base_plans')
async def show_base_plans(callback: CallbackQuery, state: FSMContext):
    base_plans = get_base_plan()
    
    if not base_plans:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=plan[1], callback_data=f"select_base_{plan[0]}")]
        for plan in base_plans
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è start
@dp.callback_query(F.data.startswith('select_base_'))
async def select_base_plan(callback: CallbackQuery):
    plan_id = int(callback.data.split('_')[-1])
    plan_name = get_plan_name_by_id(plan_id)
    user_id = callback.from_user.id
    
    update_user_current_plan(user_id, plan_name)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω: {plan_name}")
    await callback.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ - —à–∞–≥ 1
@dp.callback_query(F.data == 'create_plan')
async def create_plan_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞:")
    await state.set_state(UserState.waiting_for_plan_title)
    await callback.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ - —à–∞–≥ 2
@dp.message(UserState.waiting_for_plan_title)
async def process_plan_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∞ (–∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    await state.set_state(UserState.waiting_for_plan_tasks)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ - —à–∞–≥ 3
@dp.message(UserState.waiting_for_plan_tasks)
async def process_plan_tasks(message: Message, state: FSMContext):
    data = await state.get_data()
    plan_title = data['title']
    tasks = message.text.split('\n')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ë–î
    save_user_plan(
        user_id=message.from_user.id,
        plan_name=plan_title,
        plan_text='\n'.join(tasks)
    )
    
    await message.answer(f"–ü–ª–∞–Ω '{plan_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
@dp.callback_query(F.data == 'current_plan')
async def show_current_plan(callback: CallbackQuery):
    user_id = callback.from_user.id
    plan_name = get_current_plan(user_id)
    
    if not plan_name:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.")
        await callback.answer()
        return

    plan_text = get_plan_text_by_name(plan_name)
    if plan_text:
        await callback.message.answer(f"üìã –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {plan_name}\n\n{plan_text}")
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω.")
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /info
@dp.message(Command('info'))
async def info_command(message: Message):
    info_text = (
        "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç:\n\n"
        "1. –ò–∑–±–µ–∂–∞—Ç—å —Å—É–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n"
        "2. –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞\n"
        "3. –†–∞–∑–≤–∏–≤–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω!"
    )
    await message.answer(info_text)

class PlanCreation(StatesGroup): # –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
    waiting_for_title = State()
    waiting_for_tasks = State()
    waiting_for_confirmation = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_plan
@dp.message(Command('create_plan'))
async def create_plan_command(message: types.Message, state: FSMContext):
    await message.answer(
        "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞:"
    )
    await state.set_state(PlanCreation.waiting_for_title)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
@dp.message(PlanCreation.waiting_for_title)
async def process_plan_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∞ (–∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. –ó–∞—Ä—è–¥–∫–∞\n"
        "2. –ó–∞–≤—Ç—Ä–∞–∫\n"
        "3. –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º"
    )
    await state.set_state(PlanCreation.waiting_for_tasks)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∞
@dp.message(PlanCreation.waiting_for_tasks)
async def process_plan_tasks(message: types.Message, state: FSMContext):
    tasks = message.text.split('\n')
    data = await state.get_data()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫
    formatted_tasks = "\n".join(f"‚Ä¢ {task.strip()}" for task in tasks if task.strip())
    
    await state.update_data(tasks=formatted_tasks)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞
    preview = (
        f"üìã <b>{data['title']}</b>\n\n"
        f"{formatted_tasks}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
    )
    
    await message.answer(preview, parse_mode='HTML')
    await state.set_state(PlanCreation.waiting_for_confirmation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞
@dp.message(PlanCreation.waiting_for_confirmation, F.text.lower().in_(['–¥–∞', '–Ω–µ—Ç']))
async def confirm_plan(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        data = await state.get_data()
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_user_plan(
            user_id=user_id,
            plan_name=data['title'],
            plan_text=data['tasks']
        )
        
        await message.answer(
            f"‚úÖ –ü–ª–∞–Ω <b>{data['title']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.",
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /create_plan"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message(PlanCreation.waiting_for_confirmation)
async def wrong_confirmation(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")



class PlanView(StatesGroup):
    viewing_plans = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view_plans
@dp.message(Command('view_plans'))
async def view_plans_command(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–ª–∞–Ω–æ–≤
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã",
            callback_data="view_base_plans"
        ),
        types.InlineKeyboardButton(
            text="–ú–æ–∏ –ø–ª–∞–Ω—ã",
            callback_data="view_user_plans"
        )
    )
    builder.adjust(1)
    
    await message.answer(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PlanView.viewing_plans)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤
@dp.callback_query(F.data == "view_base_plans", PlanView.viewing_plans)
async def show_base_plans(callback: types.CallbackQuery):
    base_plans = get_base_plan()
    
    if not base_plans:
        await callback.message.edit_text("–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    builder = InlineKeyboardBuilder()
    
    for plan in base_plans:
        builder.add(
            types.InlineKeyboardButton(
                text=plan['name'],
                callback_data=f"select_plan:base:{plan['id']}"
            )
        )
    
    builder.add(
        types.InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥",
            callback_data="back_to_plan_types"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤
@dp.callback_query(F.data == "view_user_plans", PlanView.viewing_plans)
async def show_user_plans(callback: types.CallbackQuery):
    user_plans = get_user_plan(callback.from_user.id)
    if not user_plans:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    
    for plan in user_plans:
        builder.add(
            types.InlineKeyboardButton(
                text=plan['name'],
                callback_data=f"select_plan:user:{plan['id']}"
            )
        )
    
    builder.add(
        types.InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥",
            callback_data="back_to_plan_types"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìÅ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–ª–∞–Ω–æ–≤
@dp.callback_query(F.data == "back_to_plan_types")
async def back_to_plan_types(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã",
            callback_data="view_base_plans"
        ),
        types.InlineKeyboardButton(
            text="–ú–æ–∏ –ø–ª–∞–Ω—ã",
            callback_data="view_user_plans"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
@dp.callback_query(F.data.startswith("select_plan:"))
async def select_plan(callback: types.CallbackQuery):
    _, plan_type, plan_id = callback.data.split(':')
    
    if plan_type == "base":
        plans = get_base_plan()
    else:
        plans = get_user_plan(callback.from_user.id)
    
    selected_plan = next((p for p in plans if p['id'] == int(plan_id)), None)
    
    if not selected_plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω",
            callback_data=f"use_plan:{plan_type}:{plan_id}"
        ),
        types.InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥",
            callback_data=f"view_{plan_type}_plans"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìã <b>{selected_plan['name']}</b>\n\n"
        f"{selected_plan['plan_text']}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω –∫–∞–∫ —Ç–µ–∫—É—â–∏–π:",
        parse_mode='HTML',
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
@dp.callback_query(F.data.startswith("use_plan:"))
async def use_plan(callback: types.CallbackQuery):
    _, plan_type, plan_id = callback.data.split(':')
    
    if plan_type == "base":
        plans = get_base_plan()
    else:
        plans = get_user_plan(callback.from_user.id)
    
    selected_plan = next((p for p in plans if p['id'] == int(plan_id)), None)
    
    if not selected_plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    update_user_current_plan(callback.from_user.id, selected_plan['name'])
    
    await callback.message.edit_text(
        f"‚úÖ –ü–ª–∞–Ω <b>{selected_plan['name']}</b> —Ç–µ–ø–µ—Ä—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω!\n\n"
        f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{selected_plan['plan_text']}",
        parse_mode='HTML'
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /new_day –¥–ª—è –≥—Ä—É–ø–ø
@dp.message(Command('new_day'), F.chat.type.in_({"group", "supergroup"}))
async def new_day_command(message: Message):
    await message.answer(
        "üìÖ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≥—Ä—É–ø–ø—ã:",
        reply_markup=group_keyboard
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –ø–ª–∞–Ω–∞ –¥–Ω—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /static –¥–ª—è –≥—Ä—É–ø–ø
@dp.message(Command('static'), F.chat.type.in_({"group", "supergroup"}))
async def static_command(message: Message):
    await message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:",
        reply_markup=group_keyboard
    )
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())