from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from database import save_user_plan
from keyboards.inline import plan_confirmation_keyboard, plan_management_keyboard, task_marking_keyboard
from states.plans import PlanCreation, PlanManagement
from states.user import UserState
from utils import send_message_with_keyboard, logger, show_management_menu

router = Router()

@router.message(Command('create_plan'))
async def create_plan_command(message: types.Message, state: FSMContext):
    logger.info(f"Create plan command received, current state: {await state.get_state()}")

    if message.chat.type == "private":
        await send_message_with_keyboard(
            message,
            "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞:"
        )
        await state.set_state(PlanCreation.waiting_for_title)
        logger.info(f"New state set: {await state.get_state()}")
    else:
        await send_message_with_keyboard(
            message,
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
        )

@router.message(PlanCreation.waiting_for_title)
async def process_plan_title(message: types.Message, state: FSMContext):
    logger.info('Title processing triggered')
    await state.update_data(title=message.text)
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∞ (–∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. –ó–∞—Ä—è–¥–∫–∞\n"
        "2. –ó–∞–≤—Ç—Ä–∞–∫\n"
        "3. –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º"
    )
    await state.set_state(PlanCreation.waiting_for_tasks)

@router.message(PlanCreation.waiting_for_tasks)
async def process_plan_tasks(message: types.Message, state: FSMContext):
    tasks = message.text.split('\n')
    data = await state.get_data()
    
    formatted_tasks = "\n".join(task.strip() for task in tasks if task.strip())
    
    await state.update_data(tasks=formatted_tasks)
    
    preview = (
        f"üìã <b>{data['title']}</b>\n\n"
        f"{formatted_tasks}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
    )
    
    await send_message_with_keyboard(message, preview, parse_mode='HTML')
    await state.set_state(PlanCreation.waiting_for_confirmation)

@router.message(PlanCreation.waiting_for_confirmation, F.text.lower().in_(['–¥–∞', '–Ω–µ—Ç']))
async def confirm_plan(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        data = await state.get_data()
        user_id = message.from_user.id
        
        save_user_plan(
            user_id=user_id,
            name=data['title'],
            text=data['tasks']
        )
        
        await send_message_with_keyboard(
            message,
            f"‚úÖ –ü–ª–∞–Ω <b>{data['title']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.",
            parse_mode='HTML'
        )
    else:
        await send_message_with_keyboard(
            message,
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /create_plan"
        )
    
    await state.clear()

@router.message(PlanCreation.waiting_for_confirmation)
async def wrong_confirmation(message: Message):
    await send_message_with_keyboard(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")

@router.callback_query(F.data.startswith("add_at_"))
async def select_task_position(callback: CallbackQuery, state: FSMContext):
    position = int(callback.data.split('_')[-1])
    await state.update_data(new_task_position=position)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞:")
    await state.set_state(UserState.adding_new_task)
    await callback.answer()

@router.callback_query(F.data == "finish_plan")
async def finish_plan_editing(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tasks = data.get('tasks', [])
    current_date = data.get('current_date')
    plan_name = data.get('plan_name')
    
    plan_text = f"üìÖ {current_date}\nüìã {plan_name}\n\n" + "\n".join(task for task in tasks)
    await callback.message.edit_text(
        plan_text + "\n\n–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω –≤ –≥—Ä—É–ø–ø—É?",
        reply_markup=plan_confirmation_keyboard()
    )
    await state.set_state(UserState.publishing_plan)
    await callback.answer()


@router.callback_query(UserState.publishing_plan, F.data == "publish_plan")
async def publish_plan(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    tasks = data.get('tasks', [])
    current_date = data.get('current_date')
    plan_name = data.get('plan_name')
    group_id = data.get('group_id')
    
    plan_text = f"üìÖ {current_date}\nüìã {plan_name}\n\n" + "\n".join(task for task in tasks)
    
    await bot.send_message(
        chat_id=group_id,
        text=f"üåÖ {callback.from_user.mention_html()} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —Å–≤–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{plan_text}",
        parse_mode="HTML",
        reply_markup=plan_management_keyboard(callback.from_user.id)
    )
    
    await callback.message.edit_text("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø—É!")
    await state.clear()
    await callback.answer()


@router.callback_query(F.data.startswith("manage_plan:"))
async def manage_plan_handler(callback: CallbackQuery, state: FSMContext):
    try:
        plan_text = callback.message.text
        lines = plan_text.split('\n')
        
        header = "\n".join(lines[:2])
        tasks = [line.strip() for line in lines[2:] if line.strip()]
        
        await state.update_data({
            'is_new_task': False,
            'header': header,
            'tasks': tasks,
            'message_id': callback.message.message_id,
            'chat_id': callback.message.chat.id
        })
        
        await show_management_menu(callback.message)
        await state.set_state(PlanManagement.managing_plan)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_plan_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–Ω–∞", show_alert=True)
    finally:
        await callback.answer()

@router.callback_query(PlanManagement.marking_tasks, F.data.startswith("toggle_"))
async def toggle_task_mark(callback: CallbackQuery, state: FSMContext):
    try:
        task_index = int(callback.data.split('_')[1])
        data = await state.get_data()
        tasks = data['tasks']
        
        if task_index >= len(tasks):
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞", show_alert=True)
            return
        
        original_task = tasks[task_index]

        if '‚úÖ' in original_task:
            new_task = original_task.replace('‚úÖ', '').strip()
        else:
            new_task = f"‚úÖ {original_task.replace('‚úÖ', '').strip()}"
        
        if new_task == original_task:
            await callback.answer()
            return
            
        tasks[task_index] = new_task
        await state.update_data({'tasks': tasks})

        try:
            await callback.message.edit_reply_markup(reply_markup=task_marking_keyboard(tasks))
            await callback.answer(f"–ü—É–Ω–∫—Ç {task_index+1} –æ–±–Ω–æ–≤–ª–µ–Ω")
        except:
            await callback.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_task_mark: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)