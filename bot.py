from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
import asyncio
from datetime import datetime
from config import load_config, set_bot_commands
from database import *
from keyboards import *
from utils import logger, send_message_with_keyboard
from states import UserState, PlanCreation, PlanManagement, PlanView

config = load_config()
bot = Bot(token=config.bot_token)
dp = Dispatcher()

@dp.callback_query(F.data == "cancel_plan_creation")
async def handle_cancel_plan_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    group_id = data.get('group_id')
    
    if group_id:
        await callback.message.edit_text(
            f"‚ùå {callback.from_user.mention_html()} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞.",
            parse_mode="HTML"
        )
        try:
            await bot.send_message(
                chat_id=group_id,
                text=f"‚ùå {callback.from_user.mention_html()} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
    else:
        await callback.message.edit_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        )
    
    await state.clear()
    await callback.answer()

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
try:
    create_tables()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise

@dp.message(lambda message: message.chat.type == "private" and not message.text.startswith('/'))
async def private_chat_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if not current_state:
        await send_message_with_keyboard(
            message,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:"
        )

async def show_main_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())


@dp.message(UserState.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_nick = message.text
    save_user_name(user_id, user_nick)
    await send_message_with_keyboard(message, f"–û—Ç–ª–∏—á–Ω–æ, {user_nick}!")
    await state.clear()
    await show_main_menu(message)

@dp.message(Command('help'))
async def help_command(message: Message):
    if message.chat.type == "private":
        help_text = (
            "–õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/info - –û –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏\n"
            "/create_plan - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
            "/view_plans - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—ã"
        )

        await send_message_with_keyboard(message, help_text, reply_markup=help_keyboard())
    else:
        await send_message_with_keyboard(
            message,
            "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/new_day - –ù–∞—á–∞—Ç—å –¥–µ–Ω—å\n"
            "/static - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )

@dp.callback_query(F.data == "view_base_plans")
async def handle_show_base_plans(callback: CallbackQuery):
    base_plans = get_base_plan()
    keyboard = plans_keyboard(base_plans, 'base')
    callback_message = "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω:"
    
    if not base_plans:
        callback_message = "–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    await callback.message.edit_text(callback_message, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "view_user_plans")
async def handle_show_user_plans(callback: CallbackQuery):
    try:
        user_plans = get_user_plan(callback.from_user.id)
        logger.info(f'user_plans: {user_plans}')
        
        if not user_plans:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.",
                reply_markup=create_plan_keyboard()
            )
            return
        
        
        await callback.message.edit_text(
            "üìÅ –í–∞—à–∏ –ø–ª–∞–Ω—ã:",
            reply_markup=plans_keyboard(user_plans, 'user')
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("plan_action:"))
async def handle_plan_action(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    _, plan_type, plan_id = callback.data.split(':')
    plan_id = int(plan_id)
    
    if plan_type == 'base':
        plans = get_base_plan()
    else:
        plans = get_user_plan(callback.from_user.id)
    
    selected_plan = next((p for p in plans if p['id'] == plan_id), None)
    if not selected_plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if current_state == 'UserState:selecting_existing_plan':
        current_date = datetime.now().strftime("%d.%m.%Y")
        plan_header = f"üìÖ {current_date}\nüìã {selected_plan['name']}\n\n"
        
        tasks = selected_plan['plan_text'].split('\n')
        
        await state.update_data(
            selected_plan=selected_plan,
            tasks=tasks,
            plan_name=selected_plan['name'],
            current_date=current_date
        )
        
        plan_text = plan_header + "\n".join(task for task in tasks)
        await callback.message.edit_text(plan_text, reply_markup=plan_edit_keyboard())
    else:
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        keyboard = plan_actions_keyboard(selected_plan['name'], plan_type, plan_id)
        
        await callback.message.edit_text(
            f"üìÖ {current_date}\n"
            f"‚úÖ –ü–ª–∞–Ω <b>{selected_plan['name']}</b>\n\n"
            f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{selected_plan['plan_text']}",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    await callback.answer()




@dp.callback_query(UserState.selecting_existing_plan, F.data.startswith('select_user_'))
async def select_user_plan_for_new_day(callback: CallbackQuery, state: FSMContext):
    await show_user_plans(callback, state)

@dp.callback_query(UserState.selecting_existing_plan, F.data.in_(["select_base_plans", "select_user_plans", "cancel_plan_creation"]))
async def handle_existing_plan_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "select_base_plans":
        base_plans = get_base_plan()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=plan['name'], callback_data=f"plan_action:base:{plan['id']}")]
            for plan in base_plans
        ])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω:",
            reply_markup=keyboard
        )
    elif callback.data == "select_user_plans":
        user_plans = get_user_plan(callback.from_user.id)
        if not user_plans:
            await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=plan['name'], callback_data=f"plan_action:user:{plan['id']}")]
            for plan in user_plans
        ])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–ª–∞–Ω:",
            reply_markup=keyboard
        )
    elif callback.data == "cancel_plan_creation":
        await handle_cancel_plan_creation(callback, state)
    
    await callback.answer()

@dp.callback_query(F.data == 'create_plan')
async def create_plan_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞:",
        reply_markup=create_plan_keyboard
    )
    await state.set_state(PlanCreation.waiting_for_title)
    await callback.answer()


@dp.message(UserState.creating_new_plan)
async def process_new_day_plan_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await send_message_with_keyboard(
        message,
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∞ (–∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ó–∞—Ä—è–¥–∫–∞\n"
        "–ó–∞–≤—Ç—Ä–∞–∫\n"
        "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º"
    )
    await state.set_state(UserState.waiting_for_plan_tasks)

@dp.message(UserState.waiting_for_plan_tasks)
async def process_new_day_plan_tasks(message: Message, state: FSMContext):
    data = await state.get_data()
    tasks = message.text.split('\n')
    current_date = data.get('current_date')
    plan_name = data.get('title')
    
    await state.update_data(
        tasks=tasks,
        plan_name=plan_name
    )
    
    plan_text = f"üìÖ {current_date}\nüìã {plan_name}\n\n" + "\n".join(task for task in tasks)
    await send_message_with_keyboard(message, plan_text, reply_markup=plan_edit_keyboard())
    await state.set_state(UserState.editing_plan)

@dp.callback_query(F.data == 'current_plan')
async def show_current_plan(callback: CallbackQuery):
    user_id = callback.from_user.id
    plan_name = get_current_plan(user_id)
    
    if not plan_name:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.", reply_markup=back_keyboard())
        await callback.answer()
        return

    plan_text = get_plan_text_by_name(plan_name)
    if plan_text:
        await callback.message.edit_text(
            f"üìã –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {plan_name}\n\n{plan_text}",
            reply_markup=current_plan_keyboard()
        )
    else:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω.", reply_markup=back_keyboard())
    await callback.answer()

@dp.message(Command('info'))
async def info_command(message: Message):
    info_text = (
        "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç:\n\n"
        "1. –ò–∑–±–µ–∂–∞—Ç—å —Å—É–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n"
        "2. –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞\n"
        "3. –†–∞–∑–≤–∏–≤–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω!"
    )
    await send_message_with_keyboard(message, info_text)

@dp.message(Command('create_plan'))
async def create_plan_command(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        await send_message_with_keyboard(
            message,
            "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞:"
        )
        await state.set_state(PlanCreation.waiting_for_title)
    else:
        await send_message_with_keyboard(
            message,
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
        )

@dp.message(PlanCreation.waiting_for_title)
async def process_plan_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∞ (–∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. –ó–∞—Ä—è–¥–∫–∞\n"
        "2. –ó–∞–≤—Ç—Ä–∞–∫\n"
        "3. –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º"
    )
    await state.set_state(PlanCreation.waiting_for_tasks)

@dp.message(PlanCreation.waiting_for_tasks)
async def process_plan_tasks(message: types.Message, state: FSMContext):
    tasks = message.text.split('\n')
    data = await state.get_data()
    
    formatted_tasks = "\n".join(task.strip() for task in tasks if task.strip())
    
    await state.update_data(tasks=formatted_tasks)
    
    preview = (
        f"üìã <b>{data['title']}</b>\n\n"
        f"{formatted_tasks}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
    )
    
    await send_message_with_keyboard(message, preview, parse_mode='HTML')
    await state.set_state(PlanCreation.waiting_for_confirmation)

@dp.message(PlanCreation.waiting_for_confirmation, F.text.lower().in_(['–¥–∞', '–Ω–µ—Ç']))
async def confirm_plan(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        data = await state.get_data()
        user_id = message.from_user.id
        
        save_user_plan(
            user_id=user_id,
            name=data['title'],
            text=data['tasks']
        )
        
        await send_message_with_keyboard(
            message,
            f"‚úÖ –ü–ª–∞–Ω <b>{data['title']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.",
            parse_mode='HTML'
        )
    else:
        await send_message_with_keyboard(
            message,
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /create_plan"
        )
    
    await state.clear()

@dp.message(PlanCreation.waiting_for_confirmation)
async def wrong_confirmation(message: Message):
    await send_message_with_keyboard(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")

@dp.message(Command('view_plans'))
async def view_plans_command(message: types.Message, state: FSMContext):
    if message.chat.type != "private":
        await send_message_with_keyboard(
            message,
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
        )
        return

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã",
            callback_data="view_base_plans"
        ),
        types.InlineKeyboardButton(
            text="–ú–æ–∏ –ø–ª–∞–Ω—ã",
            callback_data="view_user_plans"
        )
    )
    builder.adjust(1)
    
    await send_message_with_keyboard(
        message,
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PlanView.viewing_plans)

@dp.callback_query()
async def handle_callback_query(callback: CallbackQuery ):
    try:
        if callback.message.chat.type == "private":
            await callback.message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
                reply_markup=personal_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
    
    await callback.answer()

@dp.callback_query(F.data == "view_base_plans", PlanView.viewing_plans)
async def show_base_plans(callback: types.CallbackQuery):
    base_plans = get_base_plan()
    
    if not base_plans:
        await callback.message.edit_text("–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    builder = InlineKeyboardBuilder()
    
    for plan in base_plans:
        builder.add(
            types.InlineKeyboardButton(
                text=plan['name'],
                callback_data=f"select_base_{plan['id']}"
            )
        )
    
    builder.add(
        types.InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥",
            callback_data="back_to_plan_types"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "view_user_plans", PlanView.viewing_plans)
async def show_user_plans(callback: types.CallbackQuery, state: FSMContext):
    user_plans = get_user_plan(callback.from_user.id)
    if not user_plans:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    
    for plan in user_plans:
        builder.add(
            types.InlineKeyboardButton(
                text=plan['name'],
                callback_data=f"plan_action:user:{plan['id']}"
            )
        )
    
    builder.add(
        types.InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥",
            callback_data="back_to_plan_types"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìÅ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_plan_types")
async def back_to_plan_types(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã",
            callback_data="view_base_plans"
        ),
        types.InlineKeyboardButton(
            text="–ú–æ–∏ –ø–ª–∞–Ω—ã",
            callback_data="view_user_plans"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("select_plan:"))
async def select_plan(callback: types.CallbackQuery):
    _, plan_type, plan_id = callback.data.split(':')
    
    if plan_type == "base":
        plans = get_base_plan()
    else:
        plans = get_user_plan(callback.from_user.id)
    
    selected_plan = next((p for p in plans if p['id'] == int(plan_id)), None)
    
    if not selected_plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω",
            callback_data=f"use_plan:{plan_type}:{plan_id}"
        ),
        types.InlineKeyboardButton(
            text="‚Üê –ù–∞–∑–∞–¥",
            callback_data=f"view_{plan_type}_plans"
        )
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìã <b>{selected_plan['name']}</b>\n\n"
        f"{selected_plan['plan_text']}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω –∫–∞–∫ —Ç–µ–∫—É—â–∏–π:",
        parse_mode='HTML',
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("use_plan:"))
async def use_plan(callback: types.CallbackQuery):
    _, plan_type, plan_id = callback.data.split(':')
    
    if plan_type == "base":
        plans = get_base_plan()
    else:
        plans = get_user_plan(callback.from_user.id)
    
    selected_plan = next((p for p in plans if p['id'] == int(plan_id)), None)
    
    if not selected_plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    update_user_current_plan(callback.from_user.id, selected_plan['name'])
    
    await callback.message.edit_text(
        f"‚úÖ –ü–ª–∞–Ω <b>{selected_plan['name']}</b> —Ç–µ–ø–µ—Ä—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω!\n\n"
        f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{selected_plan['plan_text']}",
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message(Command('new_day'), F.chat.type.in_({"group", "supergroup"}))
async def new_day_group(message: Message, state: FSMContext):
    try:
        bot_username = (await bot.get_me()).username

        await state.update_data(group_id=message.chat.id)
        await send_message_with_keyboard(
            message,
            f"üåÖ {message.from_user.mention_html()} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å!\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω ‚Üì",
            reply_markup=new_day_keyboard(bot_username, message.chat.id),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ new_day_group: {e}")
        await send_message_with_keyboard(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "cancel_new_day")
async def cancel_new_day(callback: CallbackQuery):
    await send_message_with_keyboard(
        callback.message,
        f"‚ùå {callback.from_user.mention_html()} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞.",
        parse_mode="HTML"
    )
    await callback.answer()

@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    args = message.text.split()[1:]
    logger.info('/start args: ' + str(args))
    if len(args) > 0:
        group_id = int(args[0].split('_')[1])

        await state.update_data(group_id=group_id)
        await state.set_state(UserState.choosing_plan_type)
        await show_plan_creation_options(message, state)
    else:
        user_id = message.from_user.id
        user_name = get_user_name(user_id)
        
        if user_name is None:
            await send_message_with_keyboard(
                message,
                '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?'
            )
            await state.set_state(UserState.waiting_for_nickname)
        else:
            await send_message_with_keyboard(
                message,
                f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            )
            await show_main_menu(message)

async def show_plan_creation_options(message: Message, state: FSMContext):
    user_id = message.from_user.id
    current_plan_name: str | None = get_current_plan(user_id)
    
    await send_message_with_keyboard(
        message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=plan_creation_options_keyboard(current_plan_name)
    )
    await state.set_state(UserState.choosing_plan_type)

@dp.callback_query(UserState.choosing_plan_type)
async def handle_plan_type_choice(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if callback.data == "use_existing_plan":
        await show_existing_plans(callback, state)
        await state.set_state(UserState.selecting_existing_plan)
    elif callback.data == "create_new_plan":
        current_date = datetime.now().strftime("%d.%m.%Y")
        data['current_date'] = current_date
        await state.set_data(data)
        await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
        await state.set_state(UserState.creating_new_plan)
    elif callback.data == "use_current_plan":
        user_id = callback.from_user.id
        current_plan_name = get_current_plan(user_id)
        
        if not current_plan_name:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        
        plan_text = get_plan_text_by_name(current_plan_name)
        if not plan_text:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω.")
            await callback.answer()
            return
        
        current_date = datetime.now().strftime("%d.%m.%Y")
        plan_header = f"üìÖ {current_date}\nüìã {current_plan_name}\n\n"
        
        tasks = plan_text.split('\n')
        
        data.update({
            'tasks': tasks,
            'plan_name': current_plan_name,
            'current_date': current_date
        })
        await state.set_data(data)
        
        plan_text = plan_header + "\n".join(task for task in tasks)

        await callback.message.edit_text(plan_text, reply_markup=plan_edit_keyboard())
        await state.set_state(UserState.editing_plan)
    elif callback.data == "cancel_plan_creation":
        await handle_cancel_plan_creation(callback, state)
    
    await callback.answer()

@dp.callback_query(F.data == "edit_tasks")
async def start_task_editing(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tasks = data.get('tasks', [])
    current_date = data.get('current_date')
    plan_name = data.get('plan_name')
    plan_text = f"üìÖ {current_date}\nüìã {plan_name}\n\n"
    plan_text += "–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(task for task in tasks)
    plan_text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(plan_text, reply_markup=task_edit_keyboard(tasks))
    await state.set_state(UserState.editing_plan)
    await callback.answer()

@dp.callback_query(F.data == "add_new_task")
async def add_new_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tasks = data.get('tasks', [])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç:",
        reply_markup=task_position_keyboard(tasks)
    )
    await callback.answer()

@dp.callback_query(PlanManagement.managing_plan, F.data == "mark_tasks")
async def start_marking_tasks(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        tasks = data['tasks']
        
        keyboard = task_marking_keyboard(tasks)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:\n(‚úì - –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ)",
            reply_markup=keyboard
        )
        await state.set_state(PlanManagement.marking_tasks)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_marking_tasks: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(PlanManagement.managing_plan, F.data == "task_comments")
async def task_comments_handler(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        tasks = data['tasks']
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:",
            reply_markup=task_comments_keyboard(tasks)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ task_comments_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(F.data == "back_to_manage")
async def back_to_management(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        header = data['header']
        tasks = data['tasks']
        
        full_plan = f"{header}\n" + "\n".join(tasks)
        await callback.message.edit_text(
            full_plan,
            reply_markup=management_keyboard()
        )
        await state.set_state(PlanManagement.managing_plan)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_management: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(PlanManagement.managing_plan, F.data == "close_management")
async def close_management(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_management: {e}")
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("comment_task_"))
async def select_task_for_comment(callback: CallbackQuery, state: FSMContext):
    try:
        task_index = int(callback.data.split('_')[2])
        await state.update_data({'commenting_task': task_index})
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø—É–Ω–∫—Ç–∞ {task_index+1}:\n"
            "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)"
        )
        await state.set_state(PlanManagement.adding_comment)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_task_for_comment: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏", show_alert=True)
    finally:
        await callback.answer()

@dp.message(PlanManagement.adding_comment, F.text)
async def process_comment(message: Message, state: FSMContext):
    try:
        if message.text.startswith('/'):
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await show_management_menu(message)
            await state.set_state(PlanManagement.managing_plan)
            return
            
        data = await state.get_data()
        task_index = data['commenting_task']
        tasks = data['tasks']
        task = tasks[task_index]

        if 'üí¨' in task:
            task = task.split('üí¨')[0].strip()
        
        tasks[task_index] = f"{task} üí¨{message.text}"
        await state.update_data({'tasks': tasks})
        
        header = data['header']
        full_plan = f"{header}\n" + "\n".join(tasks)
        
        await message.bot.edit_message_text(
            chat_id=data['chat_id'],
            message_id=data['message_id'],
            text=full_plan,
            reply_markup=management_keyboard()
        )
        
        await state.set_state(PlanManagement.managing_plan)
        await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_comment: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        

@dp.callback_query(PlanManagement.managing_plan, F.data == "edit_plan")
async def start_editing_plan(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        tasks = data['tasks']
        
        keyboard = InlineKeyboardBuilder()
        for i, task in enumerate(tasks):
            clean_task = task.replace('‚úÖ', '').split('üí¨')[0].strip()
            keyboard.add(InlineKeyboardButton(
                text=f"{i+1}. {clean_task[:20]}...",
                callback_data=f"edit_task_{i}"
            ))
        
        keyboard.adjust(1)
        keyboard.row(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç",
            callback_data="add_new_task"
        ))
        keyboard.row(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_manage"
        ))
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_editing_plan: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á", show_alert=True)
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("edit_task_"))
async def select_task_to_edit(callback: CallbackQuery, state: FSMContext):
    try:
        task_index = int(callback.data.split('_')[2])
        data = await state.get_data()
        tasks = data['tasks']
        
        task_text = tasks[task_index]
        if 'üí¨' in task_text:
            task_text = task_text.split('üí¨')[0].strip()
        task_text = task_text.replace('‚úÖ', '').strip()
        
        await state.update_data({
            'editing_task_index': task_index,
            'original_task_text': task_text
        })
        
        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ {task_index+1}:\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {task_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞:"
        )
        await state.set_state(PlanManagement.editing_task)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_task_to_edit: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏", show_alert=True)
    finally:
        await callback.answer()

@dp.message(PlanManagement.editing_task)
async def process_task_edit(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        task_index = data['editing_task_index']
        tasks = data['tasks']
        
        old_task = tasks[task_index]
        marks = '‚úÖ' if '‚úÖ' in old_task else ''
        comment = ''
        if 'üí¨' in old_task:
            comment = ' üí¨' + old_task.split('üí¨')[1]
        
        tasks[task_index] = f"{marks} {message.text}{comment}".strip()
        await state.update_data({'tasks': tasks})
        
        header = data['header']
        full_plan = f"{header}\n" + "\n".join(tasks)
        
        await message.bot.edit_message_text(
            chat_id=data['chat_id'],
            message_id=data['message_id'],
            text=full_plan,
            reply_markup=management_keyboard()
        )
        
        await message.answer("–ü—É–Ω–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await state.set_state(PlanManagement.managing_plan)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_task_edit: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞")
    
@dp.callback_query(F.data == "add_new_task")
async def add_new_task_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞:"
        )
        await state.set_state(PlanManagement.adding_task) 
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_new_task_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞", show_alert=True)
    finally:
        await callback.answer()

@dp.message(PlanManagement.adding_task)
async def process_new_task(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        tasks = data.get('tasks', [])
        
        tasks.append(message.text)
        await state.update_data({'tasks': tasks})
        
        header = data['header']
        full_plan = f"{header}\n" + "\n".join(tasks)
        
        await message.bot.edit_message_text(
            chat_id=data['chat_id'],
            message_id=data['message_id'],
            text=full_plan,
            reply_markup=management_keyboard()
        )
        
        await state.set_state(PlanManagement.managing_plan)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_new_task: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞")

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "edit_current_plan")
async def edit_current_plan(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    plan_name = get_current_plan(user_id)
    
    if not plan_name:
        await callback.message.edit_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_keyboard())
        await callback.answer()
        return
    
    plan_text = get_plan_text_by_name(plan_name)
    if not plan_text:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω.", reply_markup=back_keyboard())
        await callback.answer()
        return
    
    current_date = datetime.now().strftime("%d.%m.%Y")
    tasks = plan_text.split('\n')
    
    await state.update_data(
        tasks=tasks,
        plan_name=plan_name,
        current_date=current_date
    )
    
    plan_text = f"üìÖ {current_date}\nüìã {plan_name}\n\n" + "\n".join(f"‚Ä¢ {task}" for task in tasks)
    await callback.message.edit_text(plan_text, reply_markup=plan_editor_keyboard())
    await state.set_state(UserState.editing_plan)
    await callback.answer()

@dp.callback_query(F.data == "save_current_plan")
async def save_current_plan(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tasks = data.get('tasks', [])
    plan_name = data.get('plan_name')
    plan_text = "\n".join(tasks)

    save_user_plan(callback.from_user.id, plan_name, plan_text)
    
    await callback.message.edit_text("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=back_keyboard)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "finish_day")
async def finish_day(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tasks = data.get('tasks', [])
    group_id = data.get('group_id')
    completed_tasks = sum(1 for task in tasks if '‚úÖ' in task)

    save_completed_tasks(
        user_id=callback.from_user.id,
        group_id=None,
        completed_tasks=completed_tasks
    )
    
    if group_id:
        save_completed_tasks(
            user_id=callback.from_user.id,
            group_id=group_id,
            completed_tasks=completed_tasks
        )
    
    await state.update_data(completed_tasks=completed_tasks)
    await callback.message.edit_text(
        "üìö –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã —Å–µ–≥–æ–¥–Ω—è —É—á–∏–ª–∏—Å—å?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)"
    )
    await state.set_state(PlanManagement.waiting_for_study_time)
    await callback.answer()

@dp.message(PlanManagement.waiting_for_study_time)
async def process_study_time(message: Message, state: FSMContext):
    try:
        study_hours = float(message.text.replace(',', '.'))
        if study_hours < 0:
            await message.answer("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return
        if study_hours > 24:
            await message.answer("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return
            
        data = await state.get_data()
        completed_tasks = data.get('completed_tasks', 0)
        group_id = data.get('group_id')
        
        save_study_time(
            user_id=message.from_user.id,
            group_id=None,
            study_hours=study_hours
        )
        
        if group_id:
            save_study_time(
                user_id=message.from_user.id,
                group_id=group_id,
                study_hours=study_hours
            )
            await bot.send_message(
                chat_id=group_id,
                text=f"üåô {message.from_user.mention_html()} –∑–∞–≤–µ—Ä—à–∏–ª –¥–µ–Ω—å!\n"
                     f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed_tasks}\n"
                     f"üìö –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {study_hours:.1f} —á.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"üåô –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed_tasks}\n"
                f"üìö –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {study_hours:.1f} —á."
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤:")

@dp.message(Command('static'))
async def show_statistics(message: Message):
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    if message.chat.type in ["group", "supergroup"]:
        completed_stats = get_group_completed_tasks(message.chat.id)
        study_time = get_group_study_time(message.chat.id)
        
        if completed_stats['total_completed'] == 0 and study_time == 0:
            await message.answer("üìä –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
            return
            
        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã –Ω–∞ {current_date}:\n\n"
            f"‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed_stats['total_completed']}\n"
            f"üìö –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {study_time:.1f} —á."
        )
    else:
        completed_tasks = get_user_completed_tasks(message.from_user.id)
        study_time = get_user_study_time(message.from_user.id)
        
        if completed_tasks == 0 and study_time == 0:
            await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
            return
            
        await message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {current_date}:\n\n"
            f"‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed_tasks}\n"
            f"üìö –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {study_time:.1f} —á."
        )

async def main():
    await set_bot_commands(bot)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())