from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from database.plan import get_user_plans
from database.user import save_user
from keyboards.inline import create_plan_keyboard, plans_keyboard
from states.plans import PlanCreation
from states.user import UserState
from utils import send_message_with_keyboard, show_main_menu, logger
from database.database import db

router = Router()

@router.message(UserState.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user_name = message.text
        logger.info(f'Processing nickname for user {user_id}: {user_name}')
        
        user = save_user(user_id, user_name)
        logger.info(f'User saved: {user}')
        
        await send_message_with_keyboard(message, f"–û—Ç–ª–∏—á–Ω–æ, {user_name}!")
        logger.info('Sent welcome message')
        
        await send_message_with_keyboard(message, f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        logger.info('Sent help message')
        
        await show_main_menu(message)
        logger.info('Showed main menu')
        
        await state.clear()
        logger.info('State cleared')
    except Exception as e:
        logger.error(f'Error in process_nickname: {str(e)}')
        await send_message_with_keyboard(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.callback_query(F.data == "view_user_plans")
async def handle_show_user_plans(callback: CallbackQuery):
    try:
        db.refresh_session()
        
        user_plans = get_user_plans(callback.from_user.id)
        
        if not user_plans:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.",
                reply_markup=create_plan_keyboard()
            )
            return
        
        await callback.message.edit_text(
            "üìÅ –í–∞—à–∏ –ø–ª–∞–Ω—ã:",
            reply_markup=plans_keyboard(user_plans, 'user')
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–æ–≤: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_plan_keyboard()
        )
    finally:
        await callback.answer()

@router.callback_query(F.data == 'create_plan')
async def create_plan_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞:",
        reply_markup=create_plan_keyboard()
    )
    await state.set_state(PlanCreation.waiting_for_title)
    await callback.answer()