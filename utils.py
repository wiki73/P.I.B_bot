from datetime import datetime
from typing import List, Literal
from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from database.plan import get_base_plans, get_current_plan, get_user_plans
from keyboards import group_keyboard, personal_keyboard, plan_creation_options_keyboard
import logging

from keyboards.inline import (
    existing_plans_keyboard,
    kb_main_menu,
    kb_plans,
    management_keyboard,
)
from database.models import Comment, Plan
from states.user import UserState

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def send_message_with_keyboard(
    message: Message,
    text: str,
    reply_markup: InlineKeyboardMarkup | None = None,
    parse_mode=None,
):
    base_keyboard = (
        group_keyboard()
        if message.chat.type in ["group", "supergroup"]
        else personal_keyboard()
    )

    try:
        if isinstance(reply_markup, InlineKeyboardMarkup):
            await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            await message.answer(
                text, reply_markup=base_keyboard, parse_mode=parse_mode
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(text, reply_markup=base_keyboard)


async def show_plan_creation_options(message: Message, state: FSMContext):
    user_id = message.from_user.id
    current_plan_name: str | None = get_current_plan(user_id)

    await send_message_with_keyboard(
        message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=plan_creation_options_keyboard(current_plan_name),
    )
    await state.set_state(UserState.choosing_plan_type)


async def show_main_menu(message: Message):
    await send_message_with_keyboard(
        message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_main_menu()
    )


async def show_existing_plans(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞:", reply_markup=existing_plans_keyboard()
    )
    await callback.answer()


async def show_management_menu(message: Message):
    await message.edit_reply_markup(reply_markup=management_keyboard())


def get_plan_comments(comments: List[Comment]) -> str:
    return "\n    üí¨ ".join(comment.body for comment in comments)


def get_plan_body(plan: Plan) -> str:
    tasks = "\n".join(
        ("‚úÖ" if task.checked else " ") + task.body + get_plan_comments(task.comments)
        for task in plan.tasks
    )
    return f"{tasks}"


def get_full_plan(plan: Plan) -> str:
    current_date = datetime.now().strftime("%d.%m.%Y")

    return f"""<b>üìÖ{current_date}
<i>üìù{plan.name}</i></b>

{get_plan_body(plan)}
"""


def get_full_current_plan(plan: Plan) -> str:
    return f"<b>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω</b>\n\n{get_full_plan(plan)}"


def get_plan_published_message(plan: Plan, user_name: str) -> str:

    return f"<b><u>{user_name}</u></b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª(–∞) —Å–≤–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! ü•≥\n\n{get_full_plan(plan)}"


def get_plan_by_type_user_id_plan_id(
    plan_type: Literal["base", "user"], user_id: str | None, plan_id: str
) -> Plan | None:

    if plan_type == "base":
        plans = get_base_plans()
    else:
        plans = get_user_plans(user_id)

    return next((p for p in plans if str(p.id) == plan_id), None)


async def send_welcome_message(message: Message, user_name: str):
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–Ω—è.\n"
        "–°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "- –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å\n"
        "- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏\n"
        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –∫–∞–∫ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö, —Ç–∞–∫ –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_plan ‚Äî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
        "/view_plans ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã\n"
        "/info ‚Äî –ó–∞—á–µ–º –Ω—É–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "/new_day ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å\n"
        "/static ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é."
    )
    await send_message_with_keyboard(message, text, reply_markup=kb_plans())
