from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
from datetime import datetime
from dotenv import load_dotenv
import os
import logging
from database import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
create_tables()

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class UserStates(StatesGroup):
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    waiting_nickname = State()
    choosing_plan_type = State()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    creating_plan = State()
    entering_plan_title = State()
    entering_plan_tasks = State()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    editing_plan = State()
    adding_task = State()
    editing_task = State()
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–æ–≤
    viewing_plans = State()
    selecting_plan = State()

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_menu_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_user_plans")],
        [InlineKeyboardButton(text="–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã", callback_data="view_base_plans")],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="create_plan")],
        [InlineKeyboardButton(text="–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data="current_plan")]
    ])

def get_plan_types_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–ª–∞–Ω–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã", callback_data="view_base_plans")],
        [InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_user_plans")]
    ])

def get_plan_actions_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞–Ω–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_tasks")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_plan")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_plan")]
    ])

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    args = message.text.split()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep link –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    if len(args) > 1 and args[1].startswith('newday_'):
        group_id = int(args[1].split('_')[1])
        await state.update_data(group_id=group_id)
        await show_plan_options(message, state)
        return
    
    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
    user_id = message.from_user.id
    user_name = get_user_name(user_id)
    
    if not user_name:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        await state.set_state(UserStates.waiting_nickname)
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ß–µ–º –ø–æ–º–æ—á—å?", reply_markup=get_main_menu_kb())

@dp.message(Command('help'))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/create_plan - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\n"
        "/view_plans - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—ã\n"
        "/info - –û –ø–æ–ª—å–∑–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    await message.answer(help_text, reply_markup=get_main_menu_kb())

@dp.message(Command('info'))
async def cmd_info(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    info_text = (
        "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç:\n\n"
        "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å\n"
        "‚Ä¢ –õ—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω!"
    )
    await message.answer(info_text)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ù–ò–ö–ê ==========
@dp.message(UserStates.waiting_nickname)
async def process_nickname(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_nick = message.text.strip()
    
    if not user_nick:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
        return
    
    save_user_name(user_id, user_nick)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {user_nick}!", reply_markup=get_main_menu_kb())
    await state.clear()

# ========== –†–ê–ë–û–¢–ê –° –ü–õ–ê–ù–ê–ú–ò ==========
@dp.callback_query(F.data == 'create_plan')
async def start_plan_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞:")
    await state.set_state(UserStates.entering_plan_title)
    await callback.answer()

@dp.message(UserStates.entering_plan_title)
async def process_plan_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    title = message.text.strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ:")
        return
    
    await state.update_data(title=title)
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n‚Ä¢ –ó–∞—Ä—è–¥–∫–∞\n‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫\n‚Ä¢ –†–∞–±–æ—Ç–∞"
    )
    await state.set_state(UserStates.entering_plan_tasks)

@dp.message(UserStates.entering_plan_tasks)
async def process_plan_tasks(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∞"""
    tasks = [t.strip() for t in message.text.split('\n') if t.strip()]
    if not tasks:
        await message.answer("–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ:")
        return
    
    data = await state.get_data()
    plan_text = "\n".join(f"‚Ä¢ {task}" for task in tasks)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞
    preview = f"üìã <b>{data['title']}</b>\n\n{plan_text}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_plan")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_plan")]
    ])
    
    await message.answer(preview, parse_mode='HTML', reply_markup=keyboard)
    await state.update_data(tasks=tasks)
    await state.set_state(UserStates.creating_plan)

@dp.callback_query(UserStates.creating_plan, F.data == 'confirm_plan')
async def confirm_plan_creation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞"""
    data = await state.get_data()
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
    save_user_plan(
        user_id=user_id,
        name=data['title'],
        text="\n".join(data['tasks'])
    )
    
    await callback.message.edit_text(f"‚úÖ –ü–ª–∞–Ω '{data['title']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.clear()
    await callback.answer()

# ========== –ü–†–û–°–ú–û–¢–† –ü–õ–ê–ù–û–í ==========
@dp.callback_query(F.data.in_(['view_user_plans', 'view_base_plans']))
async def view_plans(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤"""
    plan_type = callback.data.split('_')[1]  # 'user' –∏–ª–∏ 'base'
    
    if plan_type == 'user':
        plans = get_user_plan(callback.from_user.id)
        title = "–í–∞—à–∏ –ø–ª–∞–Ω—ã:"
    else:
        plans = get_base_plan()
        title = "–ë–∞–∑–æ–≤—ã–µ –ø–ª–∞–Ω—ã:"
    
    if not plans:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤")
        return
    
    builder = InlineKeyboardBuilder()
    for plan in plans:
        builder.add(InlineKeyboardButton(
            text=plan['name'],
            callback_data=f"select_{plan_type}_plan:{plan['id']}"
        ))
    
    builder.adjust(1)
    await callback.message.edit_text(
        title,
        reply_markup=builder.as_markup()
    )
    await state.set_state(UserStates.viewing_plans)
    await callback.answer()

@dp.callback_query(UserStates.viewing_plans, F.data.startswith('select_'))
async def select_plan(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    _, plan_type, plan_id = callback.data.split(':')
    plan_id = int(plan_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ –ë–î
    if plan_type == 'user':
        plan = next((p for p in get_user_plan(callback.from_user.id) if p['id'] == plan_id), None)
    else:
        plan = next((p for p in get_base_plan() if p['id'] == plan_id), None)
    
    if not plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—É—â–∏–π", callback_data=f"use_{plan_type}_plan:{plan_id}")],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"view_{plan_type}_plans")]
    ])
    
    await callback.message.edit_text(
        f"üìã <b>{plan['name']}</b>\n\n{plan['plan_text']}",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith('use_'))
async def use_plan(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ"""
    _, plan_type, plan_id = callback.data.split(':')
    plan_id = int(plan_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    if plan_type == 'user':
        plan = next((p for p in get_user_plan(callback.from_user.id) if p['id'] == plan_id), None)
    else:
        plan = next((p for p in get_base_plan() if p['id'] == plan_id), None)
    
    if not plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
    update_user_current_plan(callback.from_user.id, plan['name'])
    await callback.message.edit_text(
        f"‚úÖ –ü–ª–∞–Ω '{plan['name']}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—É—â–∏–π!",
        parse_mode='HTML'
    )
    await callback.answer()

# ========== –¢–ï–ö–£–©–ò–ô –ü–õ–ê–ù ==========
@dp.callback_query(F.data == 'current_plan')
async def show_current_plan(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    plan_name = get_current_plan(user_id)
    
    if not plan_name:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
        return
    
    plan_text = get_plan_text_by_name(plan_name)
    if plan_text:
        await callback.message.answer(f"üìã –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {plan_name}\n\n{plan_text}")
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω")
    await callback.answer()

# ========== –ì–†–£–ü–ü–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==========
@dp.message(Command('new_day'), F.chat.type.in_({"group", "supergroup"}))
async def new_day_group(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        bot_username = (await bot.get_me()).username
        deep_link = f"https://t.me/{bot_username}?start=newday_{message.chat.id}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", url=deep_link)],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_day")]
        ])
        
        await message.reply(
            f"üåÖ {message.from_user.mention_html()} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ new_day_group: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())